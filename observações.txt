Etapa Inicial:
Ver quais são as 10 funcionalidades e ver como cada uma delas funciona. Se tiver alguma coisa que eu ache incompleta, implementar.
Depois, pensar em como refatorar cada uma dessas funcionalidades, focando no uso de Design Patterns.

No Software Projects, temos:

• Patient Registration: Patients can register and maintain their profiles; OK
• Appointment Scheduling: Patients can book, cancel, and reschedule appointments with doctors; OK (Só tá marcando consulta, adicionar cancelamento e remarcação)
• Medical Record Management: Secure storage and access to patient medical records; (???)
• Billing and Invoicing: Automated billing for medical services rendered; OK
• Prescription Management: Doctors can create and manage prescriptions; (Faltando função de receita)
• Lab Test Ordering and Reporting: Ordering lab tests and accessing results; (Falta ver a questão de acessar resultado, so tem como solicitar o exame)
• Ward and Bed Management: Management of hospital wards and bed allocations; OK (Alocação de leito, melhorar para eu poder ver os pacientes alocados e a situação do hospital)
• Inventory Management: Management of medical supplies and inventory; OK (Parte do estoque)
• Staff Scheduling: Scheduling shifts and duties for hospital staff; (Escalonamento de funcionarios) OK
• Emergency Services Management: Handling and prioritizing emergency cases. OK (Acho que não precisa mudar)

Vamos verificar as 10, entender como cada uma funciona e começar os refatoramentos.

Obs: Se possível, usar o design patterns para alguma dessas modificações que vão ser feitas
- No alocar leito, adicionar a opção de ver os pacientes alocados
- Na parte funcionários, ver a possibilidade de ver os dados de cada tipo de funcionário do hospital (funcionario.py)
- Tá faltando uma função para fazer as receitas dos medicamentos para cada tipo de funcionário se ele poder fazer (PRIORIDADE) -> Adicionei a parte de receita, mas ainda tem q ver pra pegar o funcionario direto q ta usando e usar o metodo que faz isso se o funcionario pode gerar receita claro
- Adicionar mais funcionários OK
- Enquanto ao sistema de login, ver as diferenças para cada funcionário ao acessar o sistema se eu ver q é necessário fazer
- Ver como fazer a parte do relatório em PDF funcionar (PRIORIDADE) OK
- Tratar CPF e Cartão SUS repetidos, caso tenhamos pacientes com mesmo nome para consultar o paciente correto
- Falta a parte de remarcar e cancelar consultas OK
- Ver pq as consultas medicas vao sempre pro saulo de tarso (o msm problema deve ocorrer pra dentista e etc)

Resumo das alterações até agora:
- Consertei a geração de PDF
- Juntei a parte de funcionários pra queixa e escalonamento
- Implementei a parte de gerar receitas e ver elas para cada paciente
- Adicionei a possibilidade de remarcar e cancelar consultas que antes não tinha


Design patters: Estou pensando em implementar os seguintes:
- Builder (Para os pacientes)
- Singleton (Implementado)
- Factory Methods para criar funcionários
- Abstract Factory para criar Documentos/Relatórios

Comentários antigos:

Main:
    - Lembrar de inserir a lógica de caso não seja encontrado um paciente e ele queira ser cadastrado, voltar para a própria função para que o processo não seja interrompido
    principalmente nas funções de :
        1. CadastroPaciente
        2. ProntuarioMedico
        3. SolicitarExame
    Colocar lower para as opções de escolha e tirar o espaçamento

    Fazer encapsulamento no cpf e sus para definir o tamnho padrao de caracter (setter) e se o cpf e o sus estiver repetido

    Modificar a funcao do escalonamento do horario para que um mesmo funcionario tenha turnos diferentes

    Fazer um dicionario para os funcionarios e ir adicionando eles ( pode ser nativo mesmo)

    "Exame" pode ser alguma estrutura que tenha a maioria dos exames que médicos, enfermeiros e dentistas requesitam

    Lembrar de criar um ambiente virtual e instalar "pip install fpdf2" para poder gerar o arquivo em pdf
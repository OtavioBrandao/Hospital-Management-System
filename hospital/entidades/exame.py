from abc import ABC, abstractmethod

class Exame():
    def __init__(self,nome,codigo):
        self.nome = nome
        self.codigo = codigo

    def __str__(self):
        return self.nome

# Exames que podem ser solicitados
EXAMES_DISPONIVEIS = {
    # M√©dico
    "hemograma": Exame("Hemograma Completo", "hemograma"),
    "raio-x": Exame("Raio-X de T√≥rax", "raio-x"),
    "urina": Exame("Exame de Urina", "urina"),
    "tomografia":Exame("Tomografia computadorizada", "tomografia"),
    "ecocardiograma": Exame("EcoCardiograma", "ecocardiograma"),
    "eletrocardiograma": Exame("Eletrocardiograma", "eletrocardiograma"),
    "ultrassom": Exame("Ultrassonografia", "ultrassom"),
    "ressonancia": Exame("Resson√¢ncia Magn√©tica", "ressonancia"),
    "endoscopia": Exame("Endoscopia Digestiva", "endoscopia"),
    "colonoscopia": Exame("Colonoscopia", "colonoscopia"),
    "bi√≥psia": Exame("Bi√≥psia", "bi√≥psia"),
    "cintilografia": Exame("Cintilografia", "cintilografia"),
    "angiografia": Exame("Angiografia", "angiografia"),
    "densitometria": Exame("Densitometria √ìssea", "densitometria"),
    "papanicolau": Exame("Papanicolau", "papanicolau"),
    "mamografia": Exame("Mamografia", "mamografia"),
    "teste_alergia": Exame("Teste de Alergia", "teste_alergia"),

    # Dentista
    "radiografia_dentaria": Exame("Radiografia Dent√°ria", "radiografia_dentaria"),
    "limpeza": Exame("Limpeza e Profilaxia", "limpeza"),
    "tomografia":Exame("Tomografia computadorizada", "tomografia"),
    "exame_periodontal": Exame("Exame Periodontal", "exame_periodontal"),
    "exame_caries": Exame("Exame de C√°ries", "exame_caries"),
    "exame_endodontico": Exame("Exame Endod√¥ntico", "exame_endodontico"),
    "exame_ortodontico": Exame("Exame Ortod√¥ntico", "exame_ortodontico"),
    "exame_implante": Exame("Exame de Implante Dent√°rio", "exame_implante"),
    "exame_protese": Exame("Exame de Pr√≥tese Dent√°ria", "exame_protese"),
    "exame_siso": Exame("Exame de Siso", "exame_siso"),

    # Enfermeiro
    "glicemia": Exame("Teste de Glicemia Capilar", "glicemia"),
    "pressao": Exame("Aferi√ß√£o de Press√£o Arterial", "pressao"),
    "pulso": Exame("Aferi√ß√£o de Pulso", "pulso"),
    "temperatura": Exame("Aferi√ß√£o de Temperatura", "temperatura"),
    "saturacao": Exame("Oximetria de Pulso", "saturacao"),
    "monitoramento": Exame("Monitoramento Card√≠aco", "monitoramento"),
    # Psic√≥logo (n√£o solicita exames, mas encaminha)
    "encaminhamento": Exame("Encaminhamento para Psiquiatra", "encaminhamento")

}

# Pre√ßos para o Particular
VALORES_EXAMES = {
    # M√©dico
    "hemograma": 40,
    "raio-x": 80,
    "urina": 30,
    "tomografia": 200,
    "ecocardiograma": 120,
    "eletrocardiograma": 90,
    "ultrassom": 100,
    "ressonancia": 350,
    "endoscopia": 150,
    "colonoscopia": 300,
    "bi√≥psia": 250,
    "cintilografia": 400,
    "angiografia": 500,
    "densitometria": 120,
    "papanicolau": 60,
    "mamografia": 180,
    "teste_alergia": 150,

    # Dentista
    "radiografia_dentaria": 60,
    "limpeza": 120,
    "exame_periodontal": 100,
    "exame_caries": 70,
    "exame_endodontico": 250,
    "exame_ortodontico": 150,
    "exame_implante": 300,
    "exame_protese": 150,
    "exame_siso": 120,

    # Enfermeiro
    "glicemia": 20,
    "pressao": 15,
    "pulso": 15,
    "temperatura": 10,
    "saturacao": 20,
    "monitoramento": 100,

    # Psic√≥logo (encaminhamento)
    "encaminhamento": 10
}

# Composite para exames 
class ComponenteExame(ABC):

    @abstractmethod
    def executar(self, profissional, paciente):
        pass

    @abstractmethod
    def obter_custo(self):
        pass

    @abstractmethod
    def listar_exames(self):
        pass

class ExameSimples(ComponenteExame):
    def __init__(self, codigo):
        if codigo not in EXAMES_DISPONIVEIS:
            raise KeyError(f"C√≥digo de exame '{codigo}' n√£o encontrado")
        self.codigo = codigo
        self.exame = EXAMES_DISPONIVEIS[codigo]
        self.custo = VALORES_EXAMES[codigo]

    def executar(self, profissional, paciente):
        profissional.requisitarExame(paciente, self.codigo, False)

    def obter_custo(self):
        return self.custo
    
    def listar_exames(self):
        return [self.exame.nome]
        
# V√°rios exames simples
class ExameComposto(ComponenteExame):
    def __init__(self, nome, descricao):
        self.nome = nome
        self.descricao = descricao
        self.exames = []

    def adicionar_exame(self, exame: ComponenteExame):
        self.exames.append(exame)
        return self

    def executar(self, profissional, paciente):
        print(f"\nüî¨ Solicitando pacote: {self.nome}")
        for exame in self.exames:
            exame.executar(profissional, paciente)

    def obter_custo(self):
        return sum(exame.obter_custo() for exame in self.exames)
    
    def listar_exames(self):
        nomes = []
        for exame in self.exames:
            nomes.extend(exame.listar_exames())
        return nomes
    
def criar_catalogo_pacotes():
    catalogo = {}
    # Check-up B√°sico
    checkup_basico = ExameComposto("Checkup B√°sico", "Exames de rotina")
    checkup_basico.adicionar_exame(ExameSimples("hemograma"))
    checkup_basico.adicionar_exame(ExameSimples("urina"))
    checkup_basico.adicionar_exame(ExameSimples("glicemia"))
    catalogo["checkup_basico"] = checkup_basico
    
    # Avalia√ß√£o Card√≠aca
    cardio = ExameComposto("Avalia√ß√£o Card√≠aca Completa", "Exames para avalia√ß√£o do cora√ß√£o")
    cardio.adicionar_exame(ExameSimples("ecocardiograma"))
    cardio.adicionar_exame(ExameSimples("eletrocardiograma"))
    cardio.adicionar_exame(ExameSimples("hemograma"))
    catalogo["avaliacao_cardiaca"] = cardio
    
    # Pr√©-Operat√≥rio
    pre_op = ExameComposto("Pr√©-Operat√≥rio", "Exames necess√°rios antes de cirurgias")
    pre_op.adicionar_exame(ExameSimples("hemograma"))
    pre_op.adicionar_exame(ExameSimples("raio-x"))
    pre_op.adicionar_exame(ExameSimples("eletrocardiograma"))
    pre_op.adicionar_exame(ExameSimples("urina"))
    catalogo["pre_operatorio"] = pre_op
    
    # Sa√∫de da Mulher
    mulher = ExameComposto("Checkup Feminino", "Exames para a sa√∫de da mulher")
    mulher.adicionar_exame(ExameSimples("papanicolau"))
    mulher.adicionar_exame(ExameSimples("mamografia"))
    mulher.adicionar_exame(ExameSimples("ultrassom"))
    catalogo["checkup_feminino"] = mulher

    # Sa√∫de Bucal
    bucal = ExameComposto("Avalia√ß√£o Odontol√≥gica Completa", "Exames para a sa√∫de bucal")
    bucal.adicionar_exame(ExameSimples("radiografia_dentaria"))
    bucal.adicionar_exame(ExameSimples("exame_periodontal"))
    bucal.adicionar_exame(ExameSimples("limpeza"))
    catalogo["avaliacao_odonto"] = bucal

    # Composi√ß√£o da composi√ß√£o
    super_checkup = ExameComposto("Super Checkup", "Completo")
    super_checkup.adicionar_exame(checkup_basico)  
    super_checkup.adicionar_exame(ExameSimples("raio-x")) 
    super_checkup.adicionar_exame(ExameSimples("tomografia"))
    catalogo["super_checkup"] = super_checkup
        
    return catalogo

PACOTES_EXAMES = criar_catalogo_pacotes()
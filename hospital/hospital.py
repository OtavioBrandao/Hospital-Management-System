from entidades.paciente import Paciente
from entidades.estoque import Estoque
from entidades.administrativo import SetorAdministrativo
from entidades.emergencia import EmergenciaManager, FuncionarioObserver
from entidades.funcionario import Medico, Enfermeiro, Dentista, Psicologo, Nutricionista, Fisioterapeuta, GerenciadorFuncionariosSaude
from gerarPdf import gerar_relatorio_paciente, gerar_relatorio_equipe, gerar_relatorio_hospital
from entidades.faturamento import estrategia_para_faturar
from entidades.paciente import PacienteBuilder


funcionarios_manager = GerenciadorFuncionariosSaude()

# Implementa√ß√£o do padr√£o Singleton para a classe Hospital
class Hospital:
    _instance = None
    _initialized = False
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Hospital, cls).__new__(cls)
        return cls._instance
        
    def __init__(self):
        if Hospital._initialized:
            return
        Hospital._initialized = True

        builder = PacienteBuilder()

        # Vitor Gabriel - Particular, perfil completo
        vitor = builder.resetar()\
            .com_nome("Vitor Gabriel")\
            .com_cpf("12345")\
            .com_cartao_sus("67890")\
            .com_idade(25)\
            .com_altura(175)\
            .com_peso(70)\
            .com_tipo_sanguineo("O+")\
            .com_genero("MASCULINO")\
            .com_tipo_plano("PARTICULAR")\
            .com_telefone("82999887766")\
            .construir()

        vitor.historico_medico.adicionar_alergia("Dipirona")
        vitor.historico_medico.adicionar_observacao("Paciente pratica atividades f√≠sicas regularmente")

        # Ot√°vio - Conv√™nio Unimed
        otavio = builder.resetar()\
            .com_nome("Ot√°vio")\
            .com_cpf("54321")\
            .com_cartao_sus("09876")\
            .com_idade(32)\
            .com_altura(180)\
            .com_peso(85)\
            .com_tipo_sanguineo("A+")\
            .com_genero("MASCULINO")\
            .com_tipo_plano("CONVENIO")\
            .com_tipo_convenio("UNIMED")\
            .com_telefone("82988776655")\
            .construir()

        otavio.historico_medico.adicionar_doenca_cronica("Hipertens√£o")
        otavio.historico_medico.adicionar_medicamento("Losartana 50mg - 1cp/dia")

        # Kaique Silva - SUS
        kaique = builder.resetar()\
            .com_nome("Kaique Silva")\
            .com_cpf("11223")\
            .com_cartao_sus("44556")\
            .com_idade(19)\
            .com_altura(168)\
            .com_peso(65)\
            .com_tipo_sanguineo("B+")\
            .com_genero("MASCULINO")\
            .com_tipo_plano("SUS")\
            .com_telefone("82987654321")\
            .construir()

        # Ygor - Conv√™nio Amil
        ygor = builder.resetar()\
            .com_nome("Ygor")\
            .com_cpf("33445")\
            .com_cartao_sus("66778")\
            .com_idade(28)\
            .com_altura(172)\
            .com_peso(78)\
            .com_tipo_sanguineo("AB+")\
            .com_genero("MASCULINO")\
            .com_tipo_plano("CONVENIO")\
            .com_tipo_convenio("AMIL")\
            .com_telefone("82986543210")\
            .construir()


        ygor.historico_medico.adicionar_cirurgia("Apendicectomia - 2018")

        # Marco Gomes - Conv√™nio Bradesco
        marco = builder.resetar()\
            .com_nome("Marco Gomes")\
            .com_cpf("55667")\
            .com_cartao_sus("77889")\
            .com_idade(45)\
            .com_altura(178)\
            .com_peso(92)\
            .com_tipo_sanguineo("O-")\
            .com_genero("MASCULINO")\
            .com_tipo_plano("CONVENIO")\
            .com_tipo_convenio("BRADESCO")\
            .com_telefone("82985432109")\
            .construir()

        marco.historico_medico.adicionar_doenca_cronica("Diabetes tipo 2")
        marco.historico_medico.adicionar_medicamento("Metformina 850mg - 2cp/dia")
        marco.historico_medico.adicionar_alergia("Penicilina")

        self.pacientes = [vitor, otavio, kaique, ygor, marco]

        self.funcionarios = [
        Medico("Dr. House", "CRM-999", "dr.house@hospital.com", "5582999999999", "Diagn√≥stico"),
        Medico("Saulo de Tarso", "CRM-123", "saulo@hospital.com", "5582988888888", "Cardiologista"),
        Medico("Maria", "CRM-456", "maria@hospital.com", "5582977777777", "Ortopedista"),
        Medico("Joana D'Arc", "CRM-789", "joana@hospital.com", "5582966666666", "Pediatra"),
        Medico("Cl√°udio", "CRM-101", "claudio@hospital.com", "5582955555555", "Neurologista"),
        Medico("Augusto", "CRM-202", "augusto@hospital.com", "5582944444444", "Cl√≠nico Geral"),
        Medico("C√©sar", "CRM-303", "cesar@hospital.com", "5582933333333", "Dermatologista"),
        Medico("Caio Calheiros", "CRM-404", "caio@hospital.com", "5582922222222", "Oftalmologista"),
        
        Enfermeiro("Pedro", "COREN-101", "pedro@hospital.com", "5582911111111"),
        Enfermeiro("Josemir", "COREN-102", "josemir@hospital.com", "5582900000000"),
        Enfermeiro("Karina", "COREN-202", "karina@hospital.com", "5582899999999"),
        Enfermeiro("Ana", "COREN-456", "ana@hospital.com", "5582888888888"),
        Enfermeiro("Agostinho de Hipona", "COREN-789", "agostinho@hospital.com", "5582877777777"),
        
        Dentista("Aurora Vieira", "CRO-789", "aurora@hospital.com", "5582866666666"),
        Dentista("Beatriz Silva", "CRO-456", "beatriz@hospital.com", "5582855555555"),
        Dentista("Carlos Eduardo", "CRO-123", "carlos@hospital.com", "5582844444444"),
        Dentista("Daniela Costa", "CRO-321", "daniela@hospital.com", "5582833333333"),
        
        Psicologo("Madalena", "CRP-101", "madalena@hospital.com", "5582822222222"),
        Psicologo("Mariana", "CRP-202", "mariana@hospital.com", "5582811111111"),
        Psicologo("Marcos", "CRP-303", "marcos@hospital.com", "5582800000000"),
        Psicologo("Suzana", "CRP-404", "suzana@hospital.com", "5582799999999")
        ]
        self.leitos = []
        self.escalonamento = {
            "Saulo de Tarso": "Manh√£",
            "Caio Calheiros": "Tarde",
            "Dr. House": "Noite",
            "Pedro": "Tarde",
            "Josemir": "Noite",
            "Karina": "Manh√£",
            "Suzana": "Noite"
        }
        self.estoque = Estoque()
        self.administrativo = SetorAdministrativo()
        self.emergencias = EmergenciaManager()

        for nome, turno in self.escalonamento.items():
            funcionario = next((f for f in self.funcionarios if f.nome == nome), None)
            if funcionario:
                observer = FuncionarioObserver(funcionario, email=funcionario.email, whatsapp=funcionario.whatsapp)
                self.emergencias.adicionar_observer(observer, turno)


    def adicionar_funcionario(self, tipo, nome, registro, especialidade=None, email=None, whatsapp=None):

        for funcionario in self.funcionarios:
            if funcionario.registro == registro:
                print("J√° existe um funcion√°rio com esse registro.")
                return
            
        if not tipo in funcionarios_manager.factories:
            print(f"Tipo de funcion√°rio '{tipo}' inv√°lido.")
            return

        try:
            funcionario = funcionarios_manager.criar_funcionario(tipo, nome, registro, especialidade, email, whatsapp)
            self.funcionarios.append(funcionario)
            print(f"{tipo.capitalize()} {nome} adicionado ao hospital.")
        except ValueError as e:
            print(f"Erro ao adicionar funcion√°rio: {e}")

    def remover_funcionario(self, nome, registro=None):
        for f in self.funcionarios:
            if f.nome.lower() == nome.lower() and (registro is None or f.registro == registro):
                self.funcionarios.remove(f)
                print(f"Funcion√°rio {nome} removido.")
                return
        print("Funcion√°rio n√£o encontrado.")
    
    def listar_funcionarios(self):
        if not self.funcionarios:
            print("Nenhum funcion√°rio cadastrado.")
            return 

        print("\n--- Lista de Funcion√°rios ---")
        for i, funcionario in enumerate(self.funcionarios, 1):
            nome = funcionario.nome
            registro = funcionario.registro if funcionario.registro else "N√£o informado"
            especialidade = getattr(funcionario, 'especialidade', 'N/A')
            print(f"{i}: Nome: {nome}, Registro: {registro}, Especialidade: {especialidade}")
    
    def mostrar_notificacoes_emergencia(self):
        if not self.emergencias.log:
            print("Nenhuma notifica√ß√£o de emerg√™ncia.")
            return
        for log in self.emergencias.log:
            print(f"üïí {log[0]} - {log[1].nome} recebeu a notifica√ß√£o: {log[2]}")

    def cadastrar_paciente(self, nome, cpf=None, cartao_sus=None):
        paciente = Paciente(nome, cpf, cartao_sus)
        self.pacientes.append(paciente)
        print(f"Paciente {nome} cadastrado.")

    def encontrar_paciente(self, nome):
        for p in self.pacientes:
            if p.nome.lower() == nome.lower():
                return p
        return None
    
    def listarPacientes(self):
        if not self.pacientes:
            print("Nenhum paciente cadastrado.")
            return  # Retorna para sair da fun√ß√£o se n√£o houver pacientes

        print("\n--- Lista de Pacientes ---")
        for i, paciente in enumerate(self.pacientes, 1):
            nome = paciente.nome
            cpf = paciente.cpf if paciente.cpf else "N√£o informado"
            cartao_sus = paciente.cartao_sus if paciente.cartao_sus else "N√£o informado"
            print(f"{i}: Nome: {nome}, CPF: {cpf}, Cart√£o SUS: {cartao_sus}")

    def mostrarPaciente(self, nome):
        paciente = self.encontrar_paciente(nome)
        if paciente:
            print(f"\n--- Detalhes do Paciente: {paciente.nome} ---")
            
            # Dados b√°sicos
            print(f"CPF: {paciente.cpf if paciente.cpf else 'N√£o informado'}")
            print(f"Cart√£o SUS: {paciente.cartao_sus if paciente.cartao_sus else 'N√£o informado'}")
            
            print(f"Idade: {paciente.idade if paciente.idade else 'N√£o informado'}")
            print(f"Altura: {paciente.altura}cm" if paciente.altura else "Altura: N√£o informado")
            print(f"Peso: {paciente.peso}kg" if paciente.peso else "Peso: N√£o informado")
            
            # IMC calculado automaticamente
            if paciente.imc:
                print(f"IMC: {paciente.imc:.2f}")
            else:
                print("IMC: N√£o calcul√°vel")
            
            # Enums
            print(f"Tipo Sangu√≠neo: {paciente.tipo_sanguineo.value if paciente.tipo_sanguineo else 'N√£o informado'}")
            print(f"G√™nero: {paciente.genero.value if paciente.genero else 'N√£o informado'}")
            print(f"Tipo de Plano: {paciente.tipo_plano.value if paciente.tipo_plano else 'N√£o informado'}")
            print(f"Conv√™nio: {paciente.tipo_convenio.value if paciente.tipo_convenio else 'N√£o informado'}")
            
            # Contato
            print(f"Telefone: {paciente.telefone if paciente.telefone else 'N√£o informado'}")
            print(f"Contato de Emerg√™ncia: {paciente.contato_emergencia if paciente.contato_emergencia else 'N√£o informado'}")
            
            # Hist√≥rico m√©dico
            print(f"\n--- Hist√≥rico M√©dico ---")
            if paciente.historico_medico:
                resumo = paciente.historico_medico.resumo()
                print(resumo if resumo != "Nenhum hist√≥rico registrado" else "Nenhum hist√≥rico registrado.")
            else:
                print("Nenhum hist√≥rico registrado.")
            print("\n--- Prontu√°rios ---")
            if paciente.prontuarios:
                for prontuario in paciente.prontuarios:
                    print(prontuario)
            else:
                print("Nenhum prontu√°rio registrado.")

            self.listar_receitas(nome)

            print("\n--- Exames Solicitados ---")
            if paciente.exames:
                for i, exame in enumerate(paciente.exames, 1):
                    print(f"{i}: {exame}")
            else:
                print("Nenhum exame solicitado.")

            print("\n--- Consultas Agendadas ---")
            if paciente.consultas:
                for i, (dia, medico) in enumerate(paciente.consultas, 1):
                    print(f"{i}: Dia {dia} com Dr(a). {medico}")
            else:
                print("Nenhuma consulta agendada.")
        else:
            print("Paciente n√£o encontrado.")

    '''Nesta fun√ß√£o √© onde implementamos o polimorfismo:
        - Cada profissional da sa√∫de tem o seu "jeito" de atender o paciente
        - Ent√£o usamos o polimorfismo para que o profissional desejado atenda o paciente
    '''
    #Contem polimorfismo
    # Adicionar aqui a possibilidade de cancelar consulta e remarcar consulta
    def agendar_consulta(self, nome_paciente, dia, tipo_profissional):
        paciente = self.encontrar_paciente(nome_paciente)
        if not paciente:
            print("Paciente n√£o encontrado.")
            return

        profissional_encontrado = None #Inicialmente nenhum profissional √© encontrado
        # Polimorfismo em a√ß√£o: procuramos por um objeto que seja da classe desejada
        # (ex: Medico, Dentista)

        for funcionario in self.funcionarios:
            #Aqui n√£o precisamos saber exatamente o tipo de profissional buscado, 
            # apenas comparamos o nome da classe com o tipo de profissional solicitado

            if funcionario.__class__.__name__.lower() == tipo_profissional.lower():
                profissional_encontrado = funcionario
                break # Encontramos o profissional, podemos parar o loop

        if profissional_encontrado: #Encontramos o profissional que queremos
            # Usamos o nome do objeto encontrado para agendar
            paciente.agendar_consulta(dia, profissional_encontrado.nome)
            print(f"Consulta agendada para {paciente.nome} com {tipo_profissional} {profissional_encontrado.nome} no dia {dia}.")
            # Exemplo de polimorfismo: chamar o m√©todo do profissional encontrado
            profissional_encontrado.atenderPaciente(paciente)
        else:
            print(f"N√£o foi encontrado um profissional do tipo '{tipo_profissional}' dispon√≠vel.")
    
    def remarcar_consulta(self, nome_paciente, indice_consulta, novo_dia):
        paciente = self.encontrar_paciente(nome_paciente)
        if not paciente:
            print("Paciente n√£o encontrado.")
            return
        if 0 <= indice_consulta < len(paciente.consultas):
            consulta = list(paciente.consultas[indice_consulta])
            consulta[0] = novo_dia
            paciente.consultas[indice_consulta] = tuple(consulta)
            print(f"Consulta remarcada para o dia {novo_dia}.")
        else:
            print("√çndice de consulta inv√°lido.")
   
    def cancelar_consulta(self, nome_paciente, indice_consulta):
        paciente = self.encontrar_paciente(nome_paciente)
        if not paciente:
            print("Paciente n√£o encontrado.")
            return
        if 0 <= indice_consulta < len(paciente.consultas):
            consulta = paciente.consultas.pop(indice_consulta)
            print(f"Consulta removida: {consulta[0]} com {consulta[1]}.")
        else:
            print("√çndice de consulta inv√°lido.")
  

    def registrar_prontuario(self, nome, profissional, descricao):
        paciente = self.encontrar_paciente(nome)
        if paciente:
            paciente.adicionar_prontuario(profissional, descricao)
            print("Prontu√°rio registrado.")
        else:
            print("Paciente n√£o encontrado.")

    def registrar_receita(self, nome, profissional, medicamento, descricao, dosagem):
        paciente = self.encontrar_paciente(nome)
        
        if paciente:
            paciente.adicionar_receita(profissional, medicamento, descricao, dosagem)
        else:
            print("Paciente n√£o encontrado.")
    
    def listar_receitas(self, nome):
        paciente = self.encontrar_paciente(nome)
        if paciente:
            if paciente.receitas:
                print(f"\n--- Receitas de {paciente.nome} ---")
                for i, receita in enumerate(paciente.receitas, 1):
                    print(f"{i}: {receita}")
            else:
                print(f"\n--- Receitas de {paciente.nome} ---")
                print("Nenhuma receita registrada.")
        else:
            print("Paciente n√£o encontrado.")

    def faturar_paciente(self, nome):
        paciente = self.encontrar_paciente(nome)
        if not paciente:
            print("Paciente n√£o encontrado.")
            return

        estrategia = estrategia_para_faturar(paciente) # Objeto de acordo com a estrat√©gia 
        valor = estrategia.calcular_faturamento(paciente)

        print(f"\nFatura de {paciente.nome}")
        print(f"Tipo de Plano: {paciente.tipo_plano}")
        if paciente.tipo_convenio:
            print(f"Conv√™nio: {paciente.tipo_convenio}")
        print(f"Consultas: {len(paciente.consultas)}")
        print(f"Exames: {len(paciente.exames)}")
        print(f"TOTAL: R$ {valor:.2f}")


    #Contem polimorfismo
    def solicitar_exame(self, nomePaciente, nomeProfissional, nomeExame):
        paciente = self.encontrar_paciente(nomePaciente)
        if not paciente:
            print("Paciente n√£o encontrado.")
            return

        profissional = None
        for funcionario in self.funcionarios: #Procuramos o profissional
            if funcionario.nome.lower() == nomeProfissional.lower():
                profissional = funcionario
                break
        
        if not profissional:
            print(f"Profissional {nomeProfissional} n√£o encontrado.")
            return

        # Polimorfismo: O hospital n√£o sabe os detalhes, apenas
        # manda o objeto profissional requisitar o exame.
        profissional.requisitarExame(paciente, nomeExame)
        
    # Adicionar op√ß√£o de ver leitos alocados e situa√ß√£o do hospital
    def alocar_leito(self, nome):
        paciente = self.encontrar_paciente(nome)
        if paciente:
            leito = f"Leito-{len(self.leitos)+1}"
            self.leitos.append((leito, paciente.nome))
            print(f"{paciente.nome} alocado no {leito}.")
        else:
            print("Paciente n√£o encontrado.")

    def escalonar_funcionario(self, nome, turno):
        self.escalonamento[nome ] = turno
        print(f"{nome} escalado para o turno {turno}.")

    def ver_escalonamento(self):
        if not self.escalonamento:
            print("Nenhum funcion√°rio escalado.")
        else:
            for nome, turno in self.escalonamento.items():
                print(f"{nome}: {turno}")

    #PDF
    def gerar_pdf_paciente(self, nome_paciente):
        paciente = self.encontrar_paciente(nome_paciente)
        if paciente:
            gerar_relatorio_paciente(paciente)
        else:
            print("Paciente n√£o encontrado.")

    def gerar_pdf_equipe(self):
        gerar_relatorio_equipe(self.funcionarios)
    
    def gerar_pdf_hospital(self):
        gerar_relatorio_hospital(self)